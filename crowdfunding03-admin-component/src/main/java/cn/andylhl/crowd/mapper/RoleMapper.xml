<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.andylhl.crowd.mapper.RoleMapper" >

  <!--查询已经分配的角色
    List<Role> getAssignedRole(String adminId);-->
  <select id="getAssignedRole" parameterType="String" resultType="Role">
      select
          r.id as id,
          r.name as name,
          r.create_time as createTime
      from
          t_admin a
      join
          inner_admin_role i
      on
          a.id = i.admin_id
      join
          t_role r
      on
          i.role_id = r.id
      where
          a.id = #{adminId}
      order by r.create_time
  </select>


  <!-- 查询未分配的角色
    List<Role> getUnAssignedRole(String adminId);-->
  <select id="getUnAssignedRole" parameterType="String" resultType="Role">
      select
          id,
          name,
          create_time
      from
          t_role
      where
          id not in (select role_id from inner_admin_role where admin_id = #{adminId})
      order by create_time
  </select>




  <!-- 根据id集合批量删除
    void removeByRoleIdArray(List<Integer> roleIdList);
  -->
  <delete id="removeByRoleIdArray" parameterType="String">
    delete from t_role where id in
    <foreach collection="list" open="(" close=")" separator="," item="id">
      #{id}
    </foreach>
  </delete>

  <!--根据关键词查询角色信息
  List<Role> getRoleByKeyword(String keyword);-->
  <select id="getRoleByKeyword" parameterType="String" resultType="Role">
        select
            id,
            name,
            create_time as createTime
        from
            t_role
        <where>
          <if test="keyword != null and keyword !=''">
                name like '%' #{keyword} '%'
          </if>
        </where>
        order by create_time desc
  </select>

  <resultMap id="BaseResultMap" type="cn.andylhl.crowd.entity.Role" >
    <id column="id" property="id" jdbcType="CHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, create_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.andylhl.crowd.entity.RoleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_role
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_role
    where id = #{id,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.andylhl.crowd.entity.RoleExample" >
    delete from t_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.andylhl.crowd.entity.Role" >
    insert into t_role (id, name, create_time
      )
    values (#{id,jdbcType=CHAR}, #{name,jdbcType=VARCHAR}, #{createTime,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.andylhl.crowd.entity.Role" >
    insert into t_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.andylhl.crowd.entity.RoleExample" resultType="java.lang.Integer" >
    select count(*) from t_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_role
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=CHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_role
    set id = #{record.id,jdbcType=CHAR},
      name = #{record.name,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.andylhl.crowd.entity.Role" >
    update t_role
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.andylhl.crowd.entity.Role" >
    update t_role
    set name = #{name,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR}
    where id = #{id,jdbcType=CHAR}
  </update>
</mapper>